{"version":3,"sources":["utils/validators/validators.js","redux/usersReducer.js","api/api.js","redux/authReducer.js","Components/Login/Login.js","redux/redux-store.js","Components/Users/User/User.js","Components/Users/Users.js","Components/Users/UsersContainer.js","App.js","serviceWorker.js","index.js","Components/Login/Login.module.css","Components/Users/Users.module.css","Components/Users/User/User.module.css"],"names":["maxLength","initialState","allUsers","currentUsers","getUserInfo","userId","dispatch","a","usersAPI","usersReducer","state","action","type","users","instance","axios","baseURL","tokenAPI","username","password","post","headers","then","response","data","getUsers","token","get","savedToken","isAuth","authReducer","required","value","maxLength50","length","renderField","input","name","meta","hasError","touched","error","className","placeholder","s","errorSpan","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","for","Field","component","validate","defaultValue","connect","auth","giveToken","props","to","cn","loginContainer","marginContainer","formData","catch","err","alert","require","combineReducers","createStore","applyMiddleware","store","usersPage","formReducer","thunkMiddleware","window","__store__","User","flexContainer","idRound","user","id","first_name","last_name","Users","usersContainer","flexChild","onClick","logout","onInput","e","newList","filter","toLowerCase","indexOf","currentTarget","filterList","map","u","key","saveUserInfo","UsersContainer","this","React","Component","compose","sort","u0","u1","userData","saveInfo","withRouter","App","exact","path","AppContainer","FinalJSApp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.36b6875d.chunk.js","sourcesContent":["export const required= (value) =>{\r\n    if (value) return undefined;\r\n    \r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) =>{\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    \r\n    return undefined;\r\n}\r\n\r\n// export const asyncValidate = (values/*, dispatch */) => {\r\n//     if(ad){\r\n\r\n//     }\r\n//     else {\r\n//         let wrongNetwork = response.data.messages[0]    \r\n//           .slice(    \r\n//             response.data.messages[0].indexOf(\">\") + 1,    \r\n//             response.data.messages[0].indexOf(\")\")    \r\n//           )    \r\n//           .toLocaleLowerCase();    \r\n//         dispatch(    \r\n//           stopSubmit(\"edit-profile\", {    \r\n//             contacts: { [wrongNetwork]: response.data.messages[0] }    \r\n//           })    \r\n//         );    \r\n//         return Promise.reject(response.data.messages[0]);    \r\n//       }\r\n// }\r\n\r\n\r\n\r\n\r\n// export const maxLength30 = (value) =>{\r\n//     if (value.length > 30) return 'Max length is 30 symbols';\r\n    \r\n//     return undefined;\r\n// }\r\n","import { usersAPI } from \"../api/api\";\r\n\r\n\r\n\r\nlet initialState = {\r\n\r\n    allUsers: [],\r\n    currentUsers: [],\r\n\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USERS':\r\n            return {\r\n                ...state,\r\n                allUsers: action.users,\r\n                currentUsers: action.users,\r\n            }\r\n        case 'CURRENT-USERS':\r\n            return {\r\n                ...state,\r\n                currentUsers: action.currentUsers\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const setUsers = (users) => {\r\n    return {\r\n        type: 'SET-USERS',\r\n        users,\r\n    }\r\n}\r\n\r\nexport const filterList = (currentUsers) => {\r\n    \r\n    return {\r\n        type: 'CURRENT-USERS',\r\n        currentUsers,\r\n    }\r\n}\r\n\r\nexport const getUsers = (token) => async (dispatch) => {\r\n    let data = await usersAPI.getUsers(token)\r\n\r\n    data.sort((u0, u1) => {\r\n        return (u0.id > u1.id ? 1 : -1);\r\n    });\r\n    dispatch(setUsers(data))\r\n}\r\n\r\nexport const saveUserInfo = (userData, savedToken) => async(dispatch) =>{\r\n    \r\n    const data = await usersAPI.saveInfo(userData, savedToken)\r\n\r\n    dispatch(getUserInfo(userData.user.id));\r\n}\r\n\r\nexport const getUserInfo = (userId) => async (dispatch) => {\r\n    debugger;\r\n    let data = await usersAPI.getUserInfo(userId)\r\ndebugger;\r\n\r\n}\r\n\r\n\r\nexport default usersReducer;","import * as axios from 'axios';\r\nimport { saveUserInfo } from '../redux/usersReducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://emphasoft-test-assignment.herokuapp.com',\r\n    // withCredentials: true,\r\n\r\n})\r\n\r\nexport const tokenAPI = {\r\n    postToken(username, password) {\r\n        return instance.post('/api-token-auth/',\r\n            { username, password },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        )\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    }\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(token) {\r\n        return instance.get('/api/v1/users/', {\r\n            headers: {\r\n                'Authorization': `token ${token}`\r\n            }\r\n        })\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    // saveInfo(userData, token){\r\n    //     debugger;\r\n    //     return instance.put(`/api/v1/users/${userData.id}/`, userData, {\r\n    //         headers: {\r\n    //             'Authorization': `token ${token}`\r\n    //         }\r\n    //     })\r\n    //     .then(response => {\r\n    //         return response.data;\r\n    //     })\r\n    // },\r\n    // getUserInfo(userId){\r\n    //     return instance.get(`/api/v1/users/${userId}/`)\r\n    //     .then(response => {\r\n    //         return response.data;\r\n    //     })\r\n    // }\r\n}","import { tokenAPI, usersAPI } from \"../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\n\r\nlet initialState = {\r\n    \r\n    savedToken: null,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state = initialState, action) =>{\r\n\r\n    switch(action.type){\r\n        case 'AUTH-SUCCESS':\r\n            return{\r\n                ...state,\r\n                savedToken: action.token,\r\n                isAuth: true,\r\n            }\r\n            case 'LOGOUT':\r\n                return{\r\n                    ...state,\r\n                    savedToken: null,\r\n                    isAuth: false,\r\n                }    \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token) => {\r\n    return{\r\n        type: 'AUTH-SUCCESS',\r\n        token,\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\nexport const giveToken = (username, password) => async(dispatch) =>{\r\n    \r\n    let data = await tokenAPI.postToken(username, password);\r\n\r\n    if(data.token){\r\n        dispatch(authSuccess(data.token))\r\n    }\r\n    // else{\r\n    //     alert(\"error\")\r\n    //     let message = \"Some error\";        \r\n    //     dispatch(stopSubmit('/login', { _error: message }));\r\n    // }\r\n    \r\n}\r\n\r\nexport const logout = () => {\r\n    return{\r\n        type: 'LOGOUT',\r\n    }\r\n}\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { giveToken } from '../../redux/authReducer'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from './Login.module.css'\r\nimport cn from 'classnames'\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n// const renderField = ({ input, name, meta: { touched, error, warning } }) => (\r\n//     <div>\r\n\r\n//         <input {...input} placeholder={name} className={\"form-control\"} />\r\n//         {touched && ((error && <span className={s.errorSpan}>{error}</span>) || (warning && <span className={s.errorSpan}>{warning}</span>))}\r\n\r\n//     </div>\r\n// )\r\n\r\nconst renderField = ({ input, name, meta}) => {\r\n    const hasError = meta.touched && meta.error;\r\n    \r\n    return(\r\n        <div className={(hasError)}>\r\n\r\n        <input {...input} placeholder={name} className={\"form-control\" + ' ' + (hasError ? s.error : \"\")}  />\r\n        {hasError && <span className={s.errorSpan}>{meta.error}</span>}\r\n\r\n    </div>\r\n    )\r\n}\r\n    \r\n\r\n\r\nconst LoginForm = ({ handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={\"form-group\"}>\r\n                <label for=\"username\">Username</label>\r\n                <Field component={renderField} name={\"username\"}\r\n                    placeholder={\"username\"}\r\n                    validate={[required, maxLength50]}\r\n                    defaultValue={\"test_super\"} />\r\n            </div>\r\n\r\n            <div className={\"form-group\"}>\r\n                <label for=\"password\">Password</label>\r\n                <Field component={renderField} name={\"password\"}\r\n                    placeholder={\"password\"} className={\"form-control\"}\r\n                    validate={[required, maxLength50]} />\r\n            </div>\r\n            <div >\r\n                <button className={\"btn btn-primary\"}>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: '/login',\r\n    \r\n        \r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.giveToken(formData.username, formData.password)\r\n            .catch(err => alert(\"Invalid username or password\"))\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/users'} />\r\n    }\r\n\r\n    return (\r\n        <div className={cn(\"container\", s.loginContainer)}>\r\n            <div className={cn(\"text-center\",s.marginContainer)}>\r\n                <h2>Тестовое задание</h2>\r\n            </div>\r\n            <div className={s.marginContainer}>\r\n            <div>\r\n                <span>Для авторизации введите данные указанные ниже</span>\r\n                </div>\r\n                <div>\r\n                <span>Username: <b>test_super</b></span>\r\n                </div>\r\n                <div>\r\n                <span>Password: <b>{\"Nf<U4f<rDbtDxAPn\"}</b></span>\r\n            </div>\r\n            </div>\r\n            <div>\r\n                <LoginReduxForm onSubmit={onSubmit} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n                isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { giveToken})(Login);","import authReducer from \"./authReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nconst { combineReducers, createStore, applyMiddleware } = require(\"redux\");\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    usersPage: usersReducer,\r\n    form: formReducer,\r\n\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nwindow.__store__ = store;\r\nexport default store;","import React from 'react';\r\nimport s from './User.module.css'\r\nimport cn from 'classnames'\r\nimport UserDataReduxForm from './UserDataReduxForm';\r\nimport { useState } from 'react';\r\n\r\nfunction User(props) {\r\n\r\n    // let [editMode, setEditMode] = useState(false);\r\n\r\n    // const onSubmit = (formData) => {\r\n\r\n    //     console.log(formData);\r\n    //     props.saveUserInfo(formData, props.savedToken)\r\n    //         .then(() => {\r\n    //             setEditMode(false)\r\n    //         })\r\n    //         .catch(() => {\r\n    //             setEditMode(true);\r\n    //             console.log(\"сработал CATCH\")\r\n    //         })\r\n\r\n    // }\r\n\r\n    return (\r\n        <li className={cn(\"list-group-item\")}>\r\n            {/* <div className={s.flexContainer}>\r\n                <div >\r\n                    <span className={s.idRound}>{`id ${props.user.id}`}</span>\r\n                </div>\r\n                <div className={\"\"}>\r\n                    <button onClick={setEditMode} className={\"btn btn-primary\"} >Edit</button>\r\n                </div>\r\n            </div>\r\n            {editMode ? <UserDataReduxForm initialValues={props.user} onSubmit={onSubmit} user={props.user} /> :\r\n                <div>\r\n                    <div><b>Username: {props.user.username}</b></div>\r\n                    <div>First name: {props.user.first_name}</div>\r\n                    <div>Last name: {props.user.last_name}</div>\r\n                </div>\r\n            } */}\r\n\r\n\r\n\r\n\r\n            \r\n            <div className={s.flexContainer}>\r\n                <div >\r\n                    <span className={s.idRound}>{`id ${props.user.id}`}</span>\r\n                </div>\r\n                {/* <div className={\"\"}>\r\n                    <button onClick={console.log(\"123\")} className={\"btn btn-primary\"} >Edit</button>\r\n                </div> */}\r\n            </div>\r\n\r\n            <div><b>Username: {props.user.username}</b></div>\r\n            <div>First name: {props.user.first_name}</div>\r\n            <div>Last name: {props.user.last_name}</div>\r\n        \r\n\r\n        </li>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default User;","import React, { useState } from 'react';\r\nimport User from './User/User';\r\nimport { Field } from 'redux-form';\r\nimport cn from 'classnames'\r\nimport s from './Users.module.css'\r\n\r\nfunction Users(props) {\r\n\r\n    \r\n\r\n    const onLogout = () => {\r\n        props.logout();\r\n    }\r\n\r\n    const onFilterList = (e) => {\r\n        \r\n        \r\n\r\n        ////////Оригинал\r\n        let newList = props.allUsers.filter( (user) => {\r\n            return (user.username.toLowerCase().indexOf(e.currentTarget.value.toLowerCase()) > -1)\r\n                \r\n        })\r\n        \r\n        props.filterList(newList);\r\n    }\r\n    \r\n    return (\r\n        <div className={cn(\"container\", s.usersContainer)}>\r\n            <div className={cn(s.flexContainer, s.marginContainer)}>\r\n                <div>\r\n                    <h2>Users</h2>\r\n                </div>\r\n                <div className={s.flexChild}>\r\n                    <button onClick={onLogout} className={\"btn btn-primary\"} >Logout</button>\r\n                </div>\r\n            </div>\r\n            <div className={\"form-group\"}>\r\n                <input type=\"text\" onInput={onFilterList} className={\"form-control\"} />\r\n            </div>\r\n            \r\n            <ul className={\"list-group\"}>\r\n                {props.currentUsers.map(u =>\r\n                    <User user={u} key={u.id} saveUserInfo={props.saveUserInfo} savedToken={props.savedToken} />\r\n                )}\r\n                {/* {props.currentUsers.length !== 0 ? props.currentUsers.map(u =>\r\n                    <User user={u} key={u.id} /> ):\r\n                    props.allUsers.map(u =>\r\n                    <User user={u} key={u.id} /> )\r\n                } */}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Users;","import React from 'react';\r\nimport { logout } from '../../redux/authReducer';\r\nimport { getUsers, filterList, saveUserInfo } from '../../redux/usersReducer';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport Users from './Users';\r\nimport { compose } from 'redux';\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    // refreshProfile() {\r\n       \r\n    //         let token = this.props.savedToken;\r\n    //         if(!token){\r\n    //             return <Redirect to={'/'} />\r\n    //         }\r\n        \r\n    // }\r\n\r\n    componentDidMount() {\r\n\r\n        // this.refreshProfile()\r\n        \r\n        let {savedToken} = this.props;\r\n        if(!savedToken){\r\n            return <Redirect to={'/'} /> \r\n        }\r\n        this.props.getUsers(savedToken);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isAuth) {\r\n            return <Redirect to={'/'} />\r\n        }\r\n        return (\r\n            <div>\r\n                <Users logout={this.props.logout}\r\n                savedToken={this.props.savedToken}\r\n                allUsers={this.props.allUsers}\r\n                currentUsers={this.props.currentUsers}\r\n                filterList={this.props.filterList}\r\n                saveUserInfo={this.props.saveUserInfo} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        savedToken: state.auth.savedToken,\r\n        allUsers: state.usersPage.allUsers,\r\n        currentUsers: state.usersPage.currentUsers,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { logout, getUsers, filterList, saveUserInfo }),\r\n    withRouter\r\n    )(UsersContainer);","import React from 'react';\nimport './App.css';\nimport { Route, HashRouter, Redirect } from 'react-router-dom';\nimport Login from './Components/Login/Login';\nimport { Provider, connect } from 'react-redux';\nimport store from \"./redux/redux-store\"\nimport UsersContainer from './Components/Users/UsersContainer';\n\n\nclass App extends React.Component {\n\n\n  render() {\n  //   if (!this.props.isAuth) {\n  //     debugger;\n  //     return <Redirect to={'/'} />\n  // }\n    return (\n            <div className={\"container-md\"}>\n              <Route exact path=\"/\">\n                <Login />\n              </Route>\n              <Route path=\"/users\">\n                <UsersContainer />\n              </Route>\n            </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      isAuth: state.auth.isAuth,\n  }\n}\n\nconst AppContainer = connect(mapStateToProps, {})(App);\n\nconst FinalJSApp = (props) => {\n  return (\n    \n      <Provider store={store}>\n        <HashRouter>\n          <AppContainer />\n        </HashRouter>\n      </Provider>\n    \n  )\n}\n\nexport default FinalJSApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FinalJSApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FinalJSApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1rLlp\",\"errorSpan\":\"Login_errorSpan__3rOON\",\"error\":\"Login_error__boyWw\",\"marginContainer\":\"Login_marginContainer__1xhFt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersContainer\":\"Users_usersContainer__20JEN\",\"flexContainer\":\"Users_flexContainer__3WwXg\",\"marginContainer\":\"Users_marginContainer__2-LaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userCard\":\"User_userCard__1B-T3\",\"idRound\":\"User_idRound__1aIP7\",\"userContainer\":\"User_userContainer__293be\",\"flexContainer\":\"User_flexContainer__9HBiB\",\"marginContainer\":\"User_marginContainer__AWMBA\"};"],"sourceRoot":""}